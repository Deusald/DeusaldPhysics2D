//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Box2D {

internal class b2Joint : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal b2Joint(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(b2Joint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~b2Joint() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public b2JointType GetJointType() {
    b2JointType ret = (b2JointType)Box2dPINVOKE.b2Joint_GetJointType(swigCPtr);
    return ret;
  }

  public b2Body GetBodyA() {
    global::System.IntPtr cPtr = Box2dPINVOKE.b2Joint_GetBodyA(swigCPtr);
    b2Body ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Body(cPtr, false);
    return ret;
  }

  public b2Body GetBodyB() {
    global::System.IntPtr cPtr = Box2dPINVOKE.b2Joint_GetBodyB(swigCPtr);
    b2Body ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Body(cPtr, false);
    return ret;
  }

  public virtual b2Vec2 GetAnchorA() {
    b2Vec2 ret = new b2Vec2(Box2dPINVOKE.b2Joint_GetAnchorA(swigCPtr), true);
    return ret;
  }

  public virtual b2Vec2 GetAnchorB() {
    b2Vec2 ret = new b2Vec2(Box2dPINVOKE.b2Joint_GetAnchorB(swigCPtr), true);
    return ret;
  }

  public virtual b2Vec2 GetReactionForce(float inv_dt) {
    b2Vec2 ret = new b2Vec2(Box2dPINVOKE.b2Joint_GetReactionForce(swigCPtr, inv_dt), true);
    return ret;
  }

  public virtual float GetReactionTorque(float inv_dt) {
    float ret = Box2dPINVOKE.b2Joint_GetReactionTorque(swigCPtr, inv_dt);
    return ret;
  }

  public b2Joint GetNext() {
    global::System.IntPtr cPtr = Box2dPINVOKE.b2Joint_GetNext__SWIG_0(swigCPtr);
    b2Joint ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Joint(cPtr, false);
    return ret;
  }

  public global::System.IntPtr GetUserData() {
    global::System.IntPtr ret = Box2dPINVOKE.b2Joint_GetUserData(swigCPtr);
    return ret;
  }

  public void SetUserData(global::System.IntPtr data) {
    Box2dPINVOKE.b2Joint_SetUserData(swigCPtr, data);
  }

  public bool IsEnabled() {
    bool ret = Box2dPINVOKE.b2Joint_IsEnabled(swigCPtr);
    return ret;
  }

  public bool GetCollideConnected() {
    bool ret = Box2dPINVOKE.b2Joint_GetCollideConnected(swigCPtr);
    return ret;
  }

  public virtual void ShiftOrigin(b2Vec2 newOrigin) {
    Box2dPINVOKE.b2Joint_ShiftOrigin(swigCPtr, b2Vec2.getCPtr(newOrigin));
    if (Box2dPINVOKE.SWIGPendingException.Pending) throw Box2dPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
