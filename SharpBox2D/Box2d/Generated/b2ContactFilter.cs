//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Box2D {

internal class b2ContactFilter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal b2ContactFilter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(b2ContactFilter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~b2ContactFilter() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2dPINVOKE.delete_b2ContactFilter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual bool ShouldCollide(b2Fixture fixtureA, b2Fixture fixtureB) {
    bool ret = (SwigDerivedClassHasMethod("ShouldCollide", swigMethodTypes0) ? Box2dPINVOKE.b2ContactFilter_ShouldCollideSwigExplicitb2ContactFilter(swigCPtr, b2Fixture.getCPtr(fixtureA), b2Fixture.getCPtr(fixtureB)) : Box2dPINVOKE.b2ContactFilter_ShouldCollide(swigCPtr, b2Fixture.getCPtr(fixtureA), b2Fixture.getCPtr(fixtureB)));
    return ret;
  }

  public b2ContactFilter() : this(Box2dPINVOKE.new_b2ContactFilter(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("ShouldCollide", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateb2ContactFilter_0(SwigDirectorMethodShouldCollide);
    Box2dPINVOKE.b2ContactFilter_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(b2ContactFilter));
    return hasDerivedMethod;
  }

  private bool SwigDirectorMethodShouldCollide(global::System.IntPtr fixtureA, global::System.IntPtr fixtureB) {
    return ShouldCollide((fixtureA == global::System.IntPtr.Zero) ? null : new b2Fixture(fixtureA, false), (fixtureB == global::System.IntPtr.Zero) ? null : new b2Fixture(fixtureB, false));
  }

  public delegate bool SwigDelegateb2ContactFilter_0(global::System.IntPtr fixtureA, global::System.IntPtr fixtureB);

  private SwigDelegateb2ContactFilter_0 swigDelegate0;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(b2Fixture), typeof(b2Fixture) };
}

}
