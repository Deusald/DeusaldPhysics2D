//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Box2D {

internal class b2DestructionListener : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal b2DestructionListener(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(b2DestructionListener obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~b2DestructionListener() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2dPINVOKE.delete_b2DestructionListener(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void SayGoodbye(b2Joint joint) {
    Box2dPINVOKE.b2DestructionListener_SayGoodbye__SWIG_0(swigCPtr, b2Joint.getCPtr(joint));
  }

  public virtual void SayGoodbye(b2Fixture fixture) {
    Box2dPINVOKE.b2DestructionListener_SayGoodbye__SWIG_1(swigCPtr, b2Fixture.getCPtr(fixture));
  }

  public b2DestructionListener() : this(Box2dPINVOKE.new_b2DestructionListener(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("SayGoodbye", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateb2DestructionListener_0(SwigDirectorMethodSayGoodbye__SWIG_0);
    if (SwigDerivedClassHasMethod("SayGoodbye", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateb2DestructionListener_1(SwigDirectorMethodSayGoodbye__SWIG_1);
    Box2dPINVOKE.b2DestructionListener_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(b2DestructionListener));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodSayGoodbye__SWIG_0(global::System.IntPtr joint) {
    SayGoodbye((joint == global::System.IntPtr.Zero) ? null : new b2Joint(joint, false));
  }

  private void SwigDirectorMethodSayGoodbye__SWIG_1(global::System.IntPtr fixture) {
    SayGoodbye((fixture == global::System.IntPtr.Zero) ? null : new b2Fixture(fixture, false));
  }

  public delegate void SwigDelegateb2DestructionListener_0(global::System.IntPtr joint);
  public delegate void SwigDelegateb2DestructionListener_1(global::System.IntPtr fixture);

  private SwigDelegateb2DestructionListener_0 swigDelegate0;
  private SwigDelegateb2DestructionListener_1 swigDelegate1;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(b2Joint) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(b2Fixture) };
}

}
