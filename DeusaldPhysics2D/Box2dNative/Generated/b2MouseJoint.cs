//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Box2D {

internal class b2MouseJoint : b2Joint {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal b2MouseJoint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(Box2dPINVOKE.b2MouseJoint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(b2MouseJoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2dPINVOKE.delete_b2MouseJoint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override b2Vec2 GetAnchorA() {
    b2Vec2 ret = new b2Vec2(Box2dPINVOKE.b2MouseJoint_GetAnchorA(swigCPtr), true);
    return ret;
  }

  public override b2Vec2 GetAnchorB() {
    b2Vec2 ret = new b2Vec2(Box2dPINVOKE.b2MouseJoint_GetAnchorB(swigCPtr), true);
    return ret;
  }

  public override b2Vec2 GetReactionForce(float inv_dt) {
    b2Vec2 ret = new b2Vec2(Box2dPINVOKE.b2MouseJoint_GetReactionForce(swigCPtr, inv_dt), true);
    return ret;
  }

  public override float GetReactionTorque(float inv_dt) {
    float ret = Box2dPINVOKE.b2MouseJoint_GetReactionTorque(swigCPtr, inv_dt);
    return ret;
  }

  public void SetTarget(b2Vec2 target) {
    Box2dPINVOKE.b2MouseJoint_SetTarget(swigCPtr, b2Vec2.getCPtr(target));
    if (Box2dPINVOKE.SWIGPendingException.Pending) throw Box2dPINVOKE.SWIGPendingException.Retrieve();
  }

  public b2Vec2 GetTarget() {
    b2Vec2 ret = new b2Vec2(Box2dPINVOKE.b2MouseJoint_GetTarget(swigCPtr), false);
    return ret;
  }

  public void SetMaxForce(float force) {
    Box2dPINVOKE.b2MouseJoint_SetMaxForce(swigCPtr, force);
  }

  public float GetMaxForce() {
    float ret = Box2dPINVOKE.b2MouseJoint_GetMaxForce(swigCPtr);
    return ret;
  }

  public void SetStiffness(float stiffness) {
    Box2dPINVOKE.b2MouseJoint_SetStiffness(swigCPtr, stiffness);
  }

  public float GetStiffness() {
    float ret = Box2dPINVOKE.b2MouseJoint_GetStiffness(swigCPtr);
    return ret;
  }

  public void SetDamping(float damping) {
    Box2dPINVOKE.b2MouseJoint_SetDamping(swigCPtr, damping);
  }

  public float GetDamping() {
    float ret = Box2dPINVOKE.b2MouseJoint_GetDamping(swigCPtr);
    return ret;
  }

  public override void ShiftOrigin(b2Vec2 newOrigin) {
    Box2dPINVOKE.b2MouseJoint_ShiftOrigin(swigCPtr, b2Vec2.getCPtr(newOrigin));
    if (Box2dPINVOKE.SWIGPendingException.Pending) throw Box2dPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
